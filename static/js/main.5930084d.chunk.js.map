{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/contacts/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/contactsForm/ContactsForm.js","components/searchForm/SearchForm.js","components/contacts/ContactsList.js","components/contacts/ContactsListContainer.js","components/section/Section.js","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","onSearchFilter","contacts","createReducer","_","payload","state","action","console","log","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","axios","defaults","baseURL","getLoading","getContacts","getFilter","onFilterRender","createSelector","normalizedFilter","toLowerCase","name","includes","ContactsForm","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","find","contact","alert","addNewContact","reset","className","onSubmit","this","type","onChange","placeholder","pattern","title","required","Component","connect","dispatch","newName","a","post","data","onSearchHandler","target","ContactsList","removeContact","map","onClick","contactId","delete","Section","children","App","fetchContacts","isLoadingContacts","ContactsListContainer","get","Object","keys","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAEaA,EAAuBC,YAClC,gCAEWC,EAAuBD,YAClC,gCAEWE,EAAqBF,YAAa,8BAElCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAE/BM,EAAuBN,YAClC,iCAEWO,EAAuBP,YAClC,iCAEWQ,EAAqBR,YAAa,+BAElCS,EAAiBT,YAAa,yBCPrCU,EAAWC,YAAc,IAAD,mBAC3BV,GAAuB,SAACW,EAAD,YAAMC,WADF,cAE3BT,GAAoB,SAACU,EAAOC,GAG3B,OAFAC,QAAQC,IAAIF,GACZC,QAAQC,IAAIH,GACN,GAAN,mBAAWA,GAAX,CAAkBC,EAAOF,aALC,cAO3BN,GAAuB,SAACO,EAAOC,GAAR,OACtBD,EAAMI,QAAO,qBAAGC,KAAgBJ,EAAOF,cARb,IAWxBO,EAAUT,aAAc,GAAD,mBAC1BZ,GAAuB,kBAAM,KADH,cAE1BE,GAAuB,kBAAM,KAFH,cAG1BC,GAAqB,kBAAM,KAHD,cAI1BC,GAAoB,kBAAM,KAJA,cAK1BC,GAAoB,kBAAM,KALA,cAM1BC,GAAkB,kBAAM,KANE,cAO1BC,GAAuB,kBAAM,KAPH,cAQ1BC,GAAuB,kBAAM,KARH,cAS1BC,GAAqB,kBAAM,KATD,IAYvBU,EAASP,YAAc,GAAD,eACzBF,GAAiB,SAACG,EAAGG,GAAJ,OAAeA,EAAOF,YAK3BQ,cAAgB,CAC7BX,WACAQ,SACAE,YClCIE,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAaaC,EAVDC,YAAe,CAC3BC,QAAS,CACPzB,SAAU0B,GAEZd,aACAe,UAAUC,I,0FCdZC,IAAMC,SAASC,QAAU,iDAElB,I,QCbMC,EAAa,SAAC5B,GAAD,OAAWA,EAAMJ,SAASU,SAEvCuB,EAAc,SAAC7B,GAAD,OAAWA,EAAMJ,SAASA,UAExCkC,EAAY,SAAC9B,GAAD,OAAWA,EAAMJ,SAASQ,QAEtC2B,EAAiBC,YAC5B,CAACH,EAAaC,IACd,SAAClC,EAAUQ,GACT,IAAM6B,EAAmB7B,EAAO8B,cAChC,OAAOtC,EAASQ,QAAO,qBAAG+B,KACnBD,cAAcE,SAASH,S,OCP5BI,E,4MACJrC,MAAQ,CACNmC,KAAM,GACNG,OAAQ,I,EAGVC,aAAe,SAACC,GACd,MAAwBA,EAAEC,cAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEd,EAAKC,SAAL,eACGR,EAAOO,K,EAIZE,aAAe,SAACJ,GACdA,EAAEK,iBAEF,EAAKC,MAAMlD,SAASmD,MAAK,SAACC,GAAD,OAAaA,EAAQb,OAAS,EAAKnC,MAAMmC,QAC9Dc,MAAM,yBAAD,OAA0B,EAAKjD,MAAMmC,KAArC,qBACL,EAAKW,MAAMI,cAAX,eAA8B,EAAKlD,QAEvC,EAAKmD,S,EAGPA,MAAQ,WACN,EAAKR,SAAS,CAAER,KAAM,GAAIG,OAAQ,M,4CAGpC,WACE,OACE,uBAAMc,UAAU,OAAOC,SAAUC,KAAKV,aAAtC,UACE,wBAAOQ,UAAU,YAAjB,iBAEE,uBACEA,UAAU,YACVG,KAAK,OACLpB,KAAK,OACLO,MAAOY,KAAKtD,MAAMmC,KAClBqB,SAAUF,KAAKf,aACfkB,YAAY,aACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,wBAAOR,UAAU,YAAjB,yBAEE,uBACEA,UAAU,aACVG,KAAK,OACLpB,KAAK,SACLsB,YAAY,qBACZf,MAAOY,KAAKtD,MAAMsC,OAClBkB,SAAUF,KAAKf,kBAInB,wBAAQgB,KAAK,SAASH,UAAU,YAAhC,gC,GA1DmBS,aA0EZC,eARS,SAAC9D,GAAD,MAAY,CAClCJ,SAAUiC,EAAY7B,OAGG,SAAC+D,GAAD,MAAe,CACxCb,cAAe,SAACc,GAAD,OAAaD,GF/CAf,EE+CuBgB,EF/CxB,uCAAa,WAAOD,GAAP,iBAAAE,EAAA,6DACxCF,EAAS1E,KAD+B,kBAGfoC,IAAMyC,KAAK,iBAAkBlB,GAHd,gBAG9BmB,EAH8B,EAG9BA,KACRJ,EAASzE,EAAkB,aAAEe,GAAI8D,EAAKhC,MAASa,KAJT,gDAMtCe,EAASxE,EAAgB,EAAD,KANc,yDAAb,4DAACyD,MEkDfc,CAA6CzB,GClD7CyB,eARS,SAAC9D,GAAD,MAAY,CAClCI,OAAQ0B,EAAU9B,OAGO,SAAC+D,GAAD,MAAe,CACxCK,gBAAiB,SAAC5B,GAAD,OAAOuB,EAASpE,EAAe6C,EAAE6B,OAAO3B,YAG5CoB,EAxBI,SAAC,GAAiC,IAA/BM,EAA8B,EAA9BA,gBAAiBhE,EAAa,EAAbA,OACrC,OACE,wBAAOgD,UAAU,kBAAjB,kCAEE,uBACEA,UAAU,cACVG,KAAK,OACLpB,KAAK,OACLsB,YAAY,aACZf,MAAOtC,EACPoD,SAAUY,UCMHE,EApBM,SAAC,GAAiC,IAA/B1E,EAA8B,EAA9BA,SAAU2E,EAAoB,EAApBA,cAChC,OACE,oBAAInB,UAAU,eAAd,SACGxD,EAAS4E,KAAI,gBAAGnE,EAAH,EAAGA,GAAI8B,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAb,OACZ,qBAAIc,UAAU,mBAAmB/C,GAAIA,EAArC,UACE,oBAAG+C,UAAU,cAAb,UAA4BjB,EAA5B,OACCG,EACD,wBACEc,UAAU,YACVG,KAAK,SACLkB,QAAS,kBAAMF,EAAclE,IAH/B,sBAH4CA,SCQvCyD,gBARS,SAAC9D,GAAD,MAAY,CAClCJ,SAAUmC,EAAe/B,OAGA,SAAC+D,GAAD,MAAe,CACxCQ,cAAe,SAAClE,GAAD,OAAQ0D,GL6BKW,EK7BkBrE,EL6BnB,uCAAe,WAAO0D,GAAP,SAAAE,EAAA,6DAC1CF,EAASvE,KADiC,kBAIlCiC,IAAMkD,OAAN,oBAA0BD,EAA1B,UAJkC,OAKxCX,EAAStE,EAAqBiF,IALU,gDAOxCX,EAASrE,EAAmB,EAAD,KAPa,yDAAf,4DAACgF,MK1BfZ,CAA6CQ,GCF7CM,I,MATC,SAAC,GAAyB,IAAvBjB,EAAsB,EAAtBA,MAAOkB,EAAe,EAAfA,SACxB,OACE,oCACE,oBAAIzB,UAAU,eAAd,SAA8BO,IAC7BkB,OCIDC,I,6KACJ,WACExB,KAAKR,MAAMiC,kB,oBAGb,WACE,OACE,qCACE,cAAC,GAAD,CAASpB,MAAM,YAAf,SACE,cAAC,EAAD,MAEF,eAAC,GAAD,CAASA,MAAM,WAAf,UACE,cAAC,EAAD,IACCL,KAAKR,MAAMkC,mBAAqB,qDACjC,cAACC,GAAD,c,GAdQpB,cA6BHC,gBARS,SAAC9D,GAAD,MAAY,CAClCgF,kBAAmBpD,EAAW5B,OAGL,SAAC+D,GAAD,MAAe,CACxCgB,cAAe,kBAAMhB,EPtBM,uCAAM,WAAOA,GAAP,iBAAAE,EAAA,6DACjCF,EAAS9E,KADwB,kBAIRwC,IAAMyD,IAAI,kBAJF,gBAIvBf,EAJuB,EAIvBA,KACRJ,EACE5E,EACEgG,OAAOC,KAAKjB,GAAMK,KAAI,SAACa,GAAD,oBAAYhF,GAAIgF,GAAQlB,EAAKkB,SAPxB,gDAW/BtB,EAAS3E,EAAmB,EAAD,KAXI,yDAAN,2DOyBd0E,CAA6CgB,IC9B5DQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUrE,MAAOA,EAAjB,SAEE,cAAC,IAAD,UACE,cAAC,GAAD,UAKNsE,SAASC,eAAe,W","file":"static/js/main.5930084d.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  \"contacts/fetchContactRequest\"\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  \"contacts/fetchContactSuccess\"\r\n);\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const removeContactRequest = createAction(\r\n  \"contacts/removeContactRequest\"\r\n);\r\nexport const removeContactSuccess = createAction(\r\n  \"contacts/removeContactSuccess\"\r\n);\r\nexport const removeContactError = createAction(\"contacts/removeContactError\");\r\n\r\nexport const onSearchFilter = createAction(\"contacts/searchFilter\");\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  onSearchFilter,\r\n} from \"./contacts-actions\";\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, action) => {\r\n    console.log(action);\r\n    console.log(state);\r\n    return [...state, action.payload];\r\n  },\r\n  [removeContactSuccess]: (state, action) =>\r\n    state.filter(({ id }) => id !== action.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [onSearchFilter]: (_, action) => action.payload,\r\n});\r\n\r\n// const error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n  // error\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  // persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"../contacts/contacts-reducers\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// export const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = \"https://shop-49287-default-rtdb.firebaseio.com\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts.json\");\r\n    dispatch(\r\n      fetchContactsSuccess(\r\n        Object.keys(data).map((key) => ({ id: key, ...data[key] }))\r\n      )\r\n    );\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addNewContact = (contact) => async (dispatch) => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post(\"/contacts.json\", contact);\r\n    dispatch(addContactSuccess({ id: data.name, ...contact }));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nexport const removeContact = (contactId) => async (dispatch) => {\r\n  dispatch(removeContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}.json`);\r\n    dispatch(removeContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(removeContactError(error));\r\n  }\r\n};\r\n//==============================================================\r\n\r\n// axios\r\n// .get(\"/contacts.json\")\r\n// .then(({ data }) =>\r\n//   dispatch(\r\n//     fetchContactsSuccess(\r\n//       Object.keys(data).map((key) => ({\r\n//         id: key,\r\n//         ...data[key],\r\n//       }))\r\n//     )\r\n//   )\r\n// )\r\n// .catch((error) => dispatch(fetchContactsError(error)));\r\n\r\n// axios\r\n//   .post(\"/contacts.json\", contact)\r\n//   .then(\r\n//     ({ data }) => dispatch(addContactSuccess({ id: data.name, ...contact }))\r\n//     // dispatch({ type: \"contacts/addContactSuccess\", payload: data })\r\n//   )\r\n//   .catch(\r\n//     (error) => dispatch(addContactError(error))\r\n//     // dispatch({ type: \"contacts/addContactError\", payload: error })\r\n//   );\r\n\r\n// axios\r\n//   .delete(`/contacts/${contactId}.json`)\r\n//   .then(() => dispatch(removeContactSuccess(contactId)))\r\n//   .catch((error) => dispatch(removeContactError(error)));\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getLoading = (state) => state.contacts.loading;\r\n\r\nexport const getContacts = (state) => state.contacts.contacts;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const onFilterRender = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n//=============================\r\n\r\n// export const onFilterRender = (state) => {\r\n//   const contacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n\r\n//=============================\r\n\r\n// const onFilterRender = (contacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addNewContact, getContacts } from \"../../redux/contacts\";\r\n// import { addNewContact } from \"../../redux/contacts/contacts-operations\";\r\n// import { getContacts } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.contacts.find((contact) => contact.name === this.state.name)\r\n      ? alert(`Contact with the name ${this.state.name} already exists.`)\r\n      : this.props.addNewContact({ ...this.state });\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        <label className=\"formLabel\">\r\n          Name\r\n          <input\r\n            className=\"nameInput\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            placeholder=\"enter name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className=\"formLabel\">\r\n          Phone number\r\n          <input\r\n            className=\"phoneInput\"\r\n            type=\"text\"\r\n            name=\"number\"\r\n            placeholder=\"enter phone number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className=\"submitBtn\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addNewContact: (newName) => dispatch(addNewContact(newName)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { onSearchFilter, getFilter } from \"../../redux/contacts\";\r\n// import { onSearchFilter } from \"../../redux/contacts/contacts-actions\";\r\n// import { getFilter } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst SearchForm = ({ onSearchHandler, filter }) => {\r\n  return (\r\n    <label className=\"searchFormLabel\">\r\n      Find contacts by name\r\n      <input\r\n        className=\"searchField\"\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"enter name\"\r\n        value={filter}\r\n        onChange={onSearchHandler}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchHandler: (e) => dispatch(onSearchFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\r\n","import React from \"react\";\r\n\r\nconst ContactsList = ({ contacts, removeContact }) => {\r\n  return (\r\n    <ul className=\"contactsList\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className=\"contactsListItem\" id={id} key={id}>\r\n          <b className=\"contactName\">{name}:</b>\r\n          {number}\r\n          <button\r\n            className=\"deleteBtn\"\r\n            type=\"button\"\r\n            onClick={() => removeContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n","import { connect } from \"react-redux\";\r\nimport ContactsList from \"./ContactsList\";\r\nimport { removeContact, onFilterRender } from \"../../redux/contacts\";\r\n// import { removeContact } from \"../../redux/contacts/contacts-operations\";\r\n// import { onFilterRender } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: onFilterRender(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  removeContact: (id) => dispatch(removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n//==================================\r\n\r\n// const mapStateToProps = ({ contacts: { contacts, filter } }) => ({\r\n//   contacts: onFilterRender(contacts, filter),\r\n// });\r\n","import React from \"react\";\r\nimport \"./Section.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2 className=\"sectionTitle\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport ContactsForm from \"./components/contactsForm/ContactsForm\";\nimport SearchForm from \"./components/searchForm/SearchForm\";\nimport ContactsListContainer from \"./components/contacts/ContactsListContainer\";\nimport Section from \"./components/section/Section\";\nimport { fetchContacts, getLoading } from \"./redux/contacts\";\nimport \"./index.css\";\n// import { fetchContacts } from \"./redux/contacts/contacts-operations\";\n// import { getLoading } from \"./redux/contacts/contacts-selectors\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <Section title=\"Phonebook\">\n          <ContactsForm />\n        </Section>\n        <Section title=\"Contacts\">\n          <SearchForm />\n          {this.props.isLoadingContacts && <h2>Loading contacts...</h2>}\n          <ContactsListContainer />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: getLoading(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/contacts/store\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n// import { PersistGate } from \"redux-persist/es/integration/react\";\n// import { persistor } from \"./redux/contacts/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}